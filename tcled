#!/usr/bin/tclsh
#ed in tcl
#mute (m@san.aq) 2015 public domain
# vim: set ai ts=2 sw=2 sts=2 et:

# global pollution :(
set prompt_str {*}
set buffer {{}}
set err_str {}
set cur_line 0
set flag_help 0
set flag_silent 0
set flag_dirty 0
set flag_prompt 0
set file_name ""
set addr1 ""
set addr2 ""

# my advanced data structure so global works...
proc map {fun list} {
  set res {}
  foreach element $list {lappend res [$fun $element]}
  set res
}
proc prefix {prefix x} {return [list $prefix $x]}
proc rem_prefix {x} {return [lindex $x 1]}
interp alias {} add_prefix {} prefix unmark

proc read_file {fn line} {
  global buffer cur_line flag_silent

  # do not open dirs!
  if {![file isfile $fn]} {return [set_error "Not a file"]}
  if {[catch {set fd [open $fn "r"]}]} {
    return [set_error "Cannot open file"]
  }
  fconfigure $fd -encoding binary -translation {binary binary}
  set buf [read $fd]
  if {$line == -1} {
    # a text file ends with \n and split will leave us with an empty element
    # at the end. :(
    set buffer "{} [map add_prefix [lrange [split $buf "\n"] 0 end-1]]"
  } else {
    # TODO(mute): Does this even work?
    set buffer "[lrange $buffer 0 $line-1] [lrange [split $buf "\n"] 0 end-1] \
        [lrange $buffer $line end]"
  }
  set cur_line [last_line]

  if {!$flag_silent} {puts [string length $buf]}
  close $fd
  return 0
}

proc write_file {fn} {
  global file_name addr1 addr2 flag_silent

  if {$fn == ""} {
    return [set_error "No current filename"]
  } elseif {$file_name == ""} {
    set file_name $fn
  }
  if {[catch {set fd [open "$fn" "w"]}]} {
    return [set_error "Cannot open file"]
  }
  fconfigure $fd -encoding binary -translation {binary binary}

  set buf [join [get_buffer] "\n"]
  puts $fd $buf ;# this adds a \n
  close $fd
  if {!$flag_silent} {puts [expr {1 + [string length $buf]}]}
  return 0
}

proc get_buffer {} {
  global buffer addr1 addr2

  return [map rem_prefix [lrange $buffer $addr1 $addr2]]
}

proc last_line {} {
  global buffer

  return [expr {[llength $buffer] - 1}]
}

proc parse_address {line rp addr} {
  global buffer cur_line marks last_search
  upvar $rp p

  while {[string is space -strict [string index $line $p]]} {incr p}

  switch -glob -- [string index $line $p] {
    ' {
      incr p
      set m [string index $line $p]
      if {[string is lower -strict $m] == 0} {
        return [set_error "Invalid mark"]
      } elseif {[info exists marks($m)] == 0} {
        return [set_error "Nonexistant mark"]
      } else {
        set addr $marks($m)
        incr p
      }
    } . {
      incr p
      set addr $cur_line
    } $ {
      incr p
      set addr [last_line]
    } [0-9] {
      regexp {[0-9]+} [string range $line $p end] num
      incr p [expr {[string length $num]}]
      set addr $num
    } [/?] {
      if {[set ch [string index $line $p]] == "?"} {
        set direction -1
      } else {
        set direction 1
      }
      set start [incr p]
      for {set len [string length $line]} {$p < $len &&
        [string index $line $p] != $ch} {incr p} {}
      set re [string range $line $start [expr {$p - 1}]]
      incr p ;# go past the ending /?
      if {$re == ""} {
        if {[info exist last_search]} {
          set re $last_search
        } else {
          return [set_error "No RE"]
        }
      } else {
        set last_search $re
      }
      # search from cur_line to cur_line, wrapping around end.
      set i $cur_line
      set max [expr {[llength $buffer] - 1}]
      for {set j 0} {$j < $max} {incr j} {
        incr i $direction
        if {$i > $max || $i < 1} {set i [expr {$direction > 0 ? 1 : $max}]}
        if {[regexp "(?b)$re" [lindex $buffer $i]]} {
          set addr $i
          break
        }
      }
      if {$addr == ""} {return [set_error "No match"]}
    } [-+] {
      set addr $cur_line
    } , {
      return $addr
    } \; {
      return $addr
    } default {
      return $addr
    }
  }

  # offset loop. [-+ \t] sep
  while 1 {
    while {[string is space -strict [string index $line $p]]} {incr p}
    # not time for another addr here
    if {[string match {['.$/?]} [string index $line $p]]} {
      return [set_error "Invalid address offset"]
      return -1
    }
    if {![string match {[-+0-9]} [string index $line $p]]} break

    # dont skip spaces here. POSIX wants "3 ---- 2" = 1
    if {[regexp {^([-+]?)([0-9]*)} [string range $line $p end] \
        off sign digits]} {
      incr p [string length $off]
      if {$digits == ""} {set off [expr 0 $sign 1]}
      incr addr $off
    }
  }
  return $addr
}

proc parse_line {line} {
  global cur_line addr1 addr2

  foreach {first p addr1 addr2 addr} {1 0} break

  # if <cr> alone it's +1p
  # can't easily do in parse_command without fall-through
  if {[string trim $line] == ""} {return [parse_line "+1p"]}

  while 1 {
    if {[set addr [parse_address $line p $addr]] == -1} {return -1}
    set ch [string index $line $p]
    if {$addr == "" && $first} {
      if {$ch == ","} {
        foreach {addr1 addr2} [list $addr2 1] break
        set addr [last_line]
      } elseif {$ch == ";"} {
        foreach {addr1 addr2} [list $addr2 $cur_line] break
        set addr [last_line]
      }
    } else {
      foreach {addr1 addr2} [list $addr2 $addr] break
    }
    if {$ch == ";"} {
      set cur_line $addr
    } elseif {$ch != ","} break
    incr p ;# only incr if it was a sep, else we gobble up cmd
    set first 0
  }
  return [parse_command [string range $line $p end]]
}

proc set_error {str} {
  global err_str flag_help

  set err_str $str
  if {$flag_help != 0} put_error
  puts stderr "?"

  return -1
}

proc put_error {} {
  global err_str

  puts stderr $err_str
}

proc check_addrs {{defaddr1 ""} {defaddr2 ""} {allowzero 0}} {
  global addr1 addr2

  if {$addr2 == ""} { ;# implies addr1 == "", ie. zero addresses
    if {$defaddr1 == ""} {return 0}
    set addr2 [expr {$defaddr2 == "" ? $defaddr1 : $defaddr2}]
    set addr1 $defaddr1
  } else {
    if {$defaddr1 == ""} {return [set_error "Address not expected"]}
    if {$addr1 == ""} {set addr1 $addr2}
  }

  if {$addr1 == 0 && !$allowzero} {
    return [set_error "Invalid address"]
  }
  if {$addr1 > $addr2 || $addr1 < 0 || $addr2 > [last_line]} {
    return [set_error "Invalid address range"]
  }

  return 0
}

proc cmd_g {rest} {
  global buffer addr1 addr2 cur_line flag_dirty

  set delim [string index $rest 0]
  # TODO(mute): error if whitespace
  set len [string length $rest]
  for {set p 1} {$p < $len && [string index $rest $p] != $delim} {incr p} { }
  set re [string range $rest 1 [expr {$p - 1}]]
  set cmd [string range $rest [incr p] end]
  # addr1 and addr2 are global and get changed by parse_line
  foreach {start end} [list $addr1 $addr2] break
  for {set i $start} {$i <= $end} {incr i} {
    foreach {mark line} [lindex $buffer $i] break
    if {[regexp -- $re $line]} {
      set buffer [lreplace $buffer $i $i [list mark $line]]
    }
  }
  while 1 {
    # find it again... they might move ya know
    for {set i 1;set end [last_line]} {$i <= $end} {incr i} {
      foreach {mark line} [lindex $buffer $i] break
      if {$mark == "mark"} break
    }
    if {$mark != "mark"} break
    set buffer [lreplace $buffer $i $i [list unmark $line]]
    parse_line "$i$cmd"
  }
}

proc cmd_s {rest} {
  global buffer addr1 addr2 cur_line flag_dirty

  if {[string index $rest 0] != "/"} {return [set_error "Invalid"]}
  set i 0
  set len [string length $rest]
  for {set i 1} {$i < $len && [string index $rest $i] != "/"} {incr i} {
    if {[string index $rest $i] == "\\"} {incr i}
  }
  ;# (?b) interprete as BRE
  set re "(?b)[string range $rest 1 [expr {$i - 1}]]" ;# $i = /
  for {set j [incr i]} {$i < $len && [string index $rest $j] != "/"} {incr j} {
    if {[string index $rest $j] == "\\"} {incr j}
  }
  set rep [string range $rest $i [expr {$j - 1}]]
  set flags [string range $rest [expr {$j + 1}] end]
  puts "re($re) rep($rep) flags($flags)"
  if {![regexp {[^0-9]*([0-9]+)} $flags -> cnt]} {set cnt 1}
  if {[string match g $flags]} {set cnt 0}

  # TODO(mute): cleanup?
  set matches 0
  for {set i $addr1} {$i < $addr2} {incr i} {
    set occurance 0
    set off 0
    set line [lindex $buffer $i]
    foreach range [regexp -all -indices -inline -- $re $line] {
      incr occurance
      if {$cnt != 0 && $occurance != $cnt} continue
      foreach {start end} $range break
      incr start $off
      set old [string range $line $start end]
      regsub $re $old $rep new
      incr off [expr {[string length $new] - [string length $old]}]
      set line "[string range $line 0 [expr {$start - 1}]]$new"
      incr matches
      set cur_line [expr {$i + 1}] ;#0-index
      set s_line $line
      if {$cnt != 0} break
    }
    if {$occurance > 0} {set buffer [lreplace $buffer $i $i $line]}
  }
  if {$matches > 0} {
    if {[string match {[pnl]} $flags]} {puts $s_line}
    set flag_dirty 1
  } else {
    return [set_error "No match"]
  }
  return 0
}

# return 2 == exit program
# return -1 = error with command
# return 0 == normal
proc parse_command {cmd} {
  global cur_line buffer flag_dirty flag_help flag_prompt addr1 addr2 marks
  global file_name

  set rest  ""
  set suffix ""

  # TODO(mute): handle command suffix correctly. some commands it's much later
  #             ie s/re/rep/suffix
  regexp {(.)((?:[nlp]?)*)(.*)} $cmd -> cmd suffix rest

  switch -glob -- $cmd {
    "" -
    [lnp] {
      # cmd suffix here is undefined behavior
      if {[check_addrs $cur_line] != 0} {return -1}
      foreach {p n l} {0 0 0} break
      if {$cmd == "n" || [string first n $suffix] != -1} {set n 1}
      if {$cmd == "l" || [string first l $suffix] != -1} {set l 1}
      set i $addr1
      foreach line [get_buffer] {
        if {$l} {
          set line [string map {"\a" {\a} "\b" {\b} "\f" {\f} "\n" {\n} \
              "\r" {\r} "\t" {\t} "\v" {\v}} $line]
        }
        if {$n} {set line "$i\t$line"}
        puts "$line"
        incr i
      }
      set cur_line $addr2
    } B {
      puts "$buffer"
    } [aci] {
      if {[check_addrs $cur_line "" 1] != 0} {return -1}
      # TODO(mute): intermediate buf needed?
      set ibuf {}
      while {[gets stdin line] != -1 && $line != "."} {
        lappend ibuf $line
      }
      if {$cmd == "i"} {
        set addr $addr2
        if {$addr == 0} {set addr 1}
      } elseif {$cmd == "c"} {
        set addr $addr1
        if {$addr == 0} {set addr 1}
        if {$addr2 == 0} {set addr2 1}
        set buffer [lreplace $buffer $addr $addr2]
      } else {
        set addr [expr {$addr2 + 1}] ;#go after
      }
      incr addr -1 ;# we're preincrementing
      # TODO(mute): string concat
      foreach line $ibuf {
        set buffer [linsert $buffer[set buffer {}] [incr addr] $line]
      }
      set cur_line $addr
      set flag_dirty 1
    } d {
      if {[check_addrs $cur_line] != 0} {return -1}
      set buffer [lreplace $buffer $addr1 $addr2]
      set cur_line $addr1
      if {$cur_line > [last_line]} {set cur_line [last_line]}
      set flag_dirty 1
    } e {
      if {[check_addrs] != 0} {return -1}
      if {$rest != ""} {set file_name [string trim $rest]}
      if {$file_name == ""} {return [set_error "No filename set"]}
      if {[read_file $file_name -1] != 0} {return -1}
      if {[info exists marks]} {unset marks}
    } f {
      if {[check_addrs] != 0} {return -1}
      set p 0
      while {[string is space -strict [string index $rest $p]]} {incr p}
      if {$p < 1} {
        return [set_error "Unexpected command suffix"]
      }
      set file_name [string range $rest $p end]
    } g {
      if {[check_addrs 1 [last_line]] != 0} {return -1}
      return [cmd_g $rest]
    } H {
      if {[check_addrs] != 0} {return -1}
      set flag_help [expr {!$flag_help}]
      put_error
    } h {
      if {[check_addrs] != 0} {return -1}
      put_error
    } j {
      if {[check_addrs $cur_line [expr {$cur_line + 1}]] != 0} {return -1}
      if {$addr2 > $addr1} {
        set buffer [lreplace $buffer $addr1 $addr2 [join [get_buffer] ""]]
      }
      set cur_line [incr $addr1]
      set flag_dirty 1
    } k {
      if {[check_addrs $cur_line] != 0} {return -1}
      set m [string index $rest 0]
      if {[string is lower -strict $m] != 1} {
        return [set_error "Invalid mark"]
      }
      set marks($m) $addr2
    } [mt] {
      if {[check_addrs $cur_line] != 0} {return -1}
      set rp 0
      if {[set dest [parse_address $rest rp ""]] == -1} {return -1}
      if {$dest >= $addr1 && $dest <= $addr2} {
        return [set_error "Invalid destination"]
      }
      set srclist [get_buffer]
      set offset 0
      set buffer "[lrange $buffer 0 $dest] $srclist [lrange $buffer \
          [expr {1 + $dest}] end]" 
      if {$cmd == "m"} {
        if {$dest < $addr1} {
          set offset [llength $srclist]
          incr addr1 $offset
          incr addr2 $offset
        }
        set buffer [lreplace $buffer $addr1 $addr2]
      }
      set cur_line [expr {$dest + $offset}]
      set flag_dirty 1
    } P {
      if {[check_addrs] != 0} {return  -1}
      set flag_prompt [expr {!$flag_prompt}]
    } q {
      if {[check_addrs] != 0} {return -1}
      if {$flag_dirty == 1} {
        set_error "Warning: modified buffer"
        incr flag_dirty
        return 0
      } else {
        return 2
      }
    } Q {
      if {[check_addrs] != 0} {return -1}
      return 2
    } r {
      if {[check_addrs [last_line]] != 0} {return -1}
      if {[regexp {(?:[[:space:]]+)([^[:space:]]+)} $rest -> fn]} {
        if {[read_file $fn $addr2] != 0} {return -1}
      } else {
        if {[read_file $file_name $addr2] != 0} {return -1}
      }
      set flag_dirty 1
    } s {
      if {[check_addrs $cur_line] != 0} {return -1}
      # TODO(mute): check suffix?
      return [cmd_s $rest]
    } w {
      if {[check_addrs 1 [last_line]] != 0} {return -1}
      if {[regexp {(?:[[:space:]]+)([^[:space:]]+)} $rest -> fn]} {
        if {[write_file $fn] != 0} {return -1}
      } else {
        if {[write_file $file_name] != 0} {return -1}
      }
      set flag_dirty 0
    } = {
      if {[check_addrs [last_line] "" 1] != 0} {return -1}
      puts $addr2
    } * {
      return [set_error "Invalid command"]
    }
  }
  return 0
}

proc usage {} {
  puts {Usage: ed [-p prompt] [-s] [-H] [file]}
  puts "  -H turn on help mode right away."
}

for {set i 0} {$i < $::argc} {incr i} {
  set a [lindex $::argv $i]
  switch -glob -- $a {
    -H {
      set flag_help 1
    } -p {
      incr i
      set prompt_str [lindex $::argv $i]
      set flag_prompt 1
    } -s {
      set flag_silent 1
    } -* {
      puts "unknown option: $a"
      usage
      return 1
    } * {
      set file_name $a
      read_file $file_name -1
      break
    }
  }
}

while 1 {
  if {$flag_prompt} {
    puts -nonewline $prompt_str
    flush stdout
  }
  if {[gets stdin line] == -1 || [parse_line $line] == 2} break
}

return 0
